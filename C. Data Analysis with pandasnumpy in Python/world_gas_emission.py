# -*- coding: utf-8 -*-
"""World_Gas_Emission.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1c6bSINtdYTIbK9FAIg2BR2z_QU-imVUv

Goal: Analyze trend and pattern of CO2 and greenhouse gas emission\
- trend emission vs time by country
- which continent released these gas the most
- time vs world avg temp
- percent share of emission in the world?
- what source is the most share in emission?
- increasing in gdp or population affect gas emission?
- whats about thailand?
"""

import pandas as pd
import numpy as np

pd.set_option('display.max_rows', None)  # Set 'None' to display all rows
pd.set_option('display.max_columns', None)  # Set 'None' to display all columns

df = pd.read_csv("/content/owid-co2-data.csv")
df.head()

"""#EDA"""

df.info()

"""## Some country has no iso_code. Lets deep down...
Its seem like continent and world data
"""

for c in df[df['iso_code'].isnull()]['country'].unique():
  print("{} rows of {} ".format(len(df[df['country'] == c]),c))

condition = df['iso_code'].isnull()
continent_df = df[condition]
df = df[~condition]
df.head()

df.describe()

consumption_based_filter = ['country', 'year','iso_code', 'population', 'gdp',
                     'primary_energy_consumption','consumption_co2', 'consumption_co2_per_capita',
                     'consumption_co2_per_gdp','trade_co2','trade_co2_share']

cumulative_filter = ['co2_growth_abs','co2_growth_prct','co2_including_luc_growth_abs','co2_including_luc_growth_prct','cumulative_cement_co2','cumulative_co2','cumulative_co2_including_luc','cumulative_coal_co2',
              'cumulative_flaring_co2','cumulative_gas_co2','cumulative_luc_co2','cumulative_oil_co2','cumulative_other_co2']

share_filter = ['share_global_cement_co2','share_global_co2','share_global_co2_including_luc','share_global_coal_co2',
          'share_global_cumulative_cement_co2','share_global_cumulative_co2','share_global_cumulative_co2_including_luc',
          'share_global_cumulative_coal_co2','share_global_cumulative_flaring_co2','share_global_cumulative_gas_co2',
          'share_global_cumulative_luc_co2','share_global_cumulative_oil_co2','share_global_cumulative_other_co2',
          'share_global_flaring_co2','share_global_gas_co2','share_global_luc_co2','share_global_oil_co2',
          'share_global_other_co2','share_of_temperature_change_from_ghg']

temp = ['temperature_change_from_ch4', 'temperature_change_from_co2',
       'temperature_change_from_ghg', 'temperature_change_from_n2o']

territorial_filter = list(set(df.columns.tolist()) - set(consumption_based_filter) - set(cumulative_filter) - set(share_filter) - set(temp))
territorial_filter  = ['country', 'year','iso_code', 'population', 'gdp'] + territorial_filter

"""## Missing Value"""

import matplotlib.pyplot as plt
import seaborn as sns

missing_values = (df.isnull().sum(axis=0) * 100/df.shape[0]).sort_values(ascending=False)

missing_values.hist()
plt.title("Histogram of missing values of features in percent")
plt.xlabel("Percent of missing values")
plt.ylabel("Frequency")

print("Number of columns that has more than 30 percent of missing values : {}".format((missing_values > 30).sum()))

"""# Data cleaning"""

year = [1800,1850,1900,1950,1990]
for y in year:
  null_count = df[df['year'] >= y].isna().sum().sum()
  percent = null_count*100/(df.shape[0]*df.shape[1])
  print('Year >= {} : has {} null values as {:.2f} percent of all data.'.format(y, null_count, percent))

"""## data in year less than 1990 has too many null values and uninformative for our works so i accept 5 percent of missing values for futher analysis"""

filter_df = ['country','year','gdp','cement_co2','co2','coal_co2','consumption_co2',
             'flaring_co2','gas_co2','land_use_change_co2','methane','nitrous_oxide','oil_co2','other_industry_co2',
             'primary_energy_consumption','temperature_change_from_ch4','temperature_change_from_co2','temperature_change_from_ghg',
             'temperature_change_from_n2o','trade_co2','trade_co2_share','total_ghg_excluding_lucf']

df = df[df['year'] >= 1990]
continent_df = continent_df[continent_df['year'] >= 1990]
df.head()

df.shape

continent_df.shape

missing_values = (df.isnull().sum(axis=0) * 100/df.shape[0]).sort_values(ascending=False)
missing_values

df.isnull().sum(axis=0).sort_values(ascending=False)

missing_values_continent_df = (continent_df.isnull().mean() * 100).sort_values(ascending=False)
missing_values_continent_df

missing_values.hist()

"""From above histrogram, most missing value columns have 0-40 percent, so we further watch their distribution by boxplot and histogram."""

import plotly.express as px
from plotly.subplots import make_subplots
import plotly.graph_objects as go # Import go from plotly.graph_objects

def bp(df):
  # Create boxplot with traces
  traces = []
  for col in df.columns:
      traces.append(
          go.Box(
              y= df[col],
              name=col,
              boxmean=True,  # Show box mean
              marker=dict(color="lightblue")  # Optional customization
          )
      )

  # Create the layout
  layout = go.Layout(
      title="Boxplot of Features",
      xaxis_title="Features",
      yaxis_title="Value"
  )

  # Create the figure
  fig = go.Figure(data=traces, layout=layout)

  # Display the plot
  fig.show()

df.reset_index(drop=True,inplace=True)
df.head()

bp(df[filter_df].iloc[:,3:].select_dtypes(include=[np.number]).drop(['primary_energy_consumption'], axis=1))

a = continent_df[filter_df].drop(['primary_energy_consumption'], axis=1)
bp(a.iloc[:,3:].select_dtypes(include=[np.number]))

"""Seem our feature has right skew distribution"""

for i in df.iloc[:,5:16].columns :
  df[i].hist(bins=20)

  # add labels and title
  plt.xlabel(i)
  plt.ylabel('Frequency')
  plt.title('Histogram')
  plt.show()

for i in a.iloc[:,3:].select_dtypes(include=[np.number]).columns :
  df[i].hist(bins=20)

  # add labels and title
  plt.xlabel(i)
  plt.ylabel('Frequency')
  plt.title('Histogram')
  plt.show()

"""All columns are right skew distribution, so we decided to fill na value with median which are robust to outlier more than mean."""

df = df.fillna(df.median())
continent_df = continent_df.fillna(df.median())

#top 10 country emit ghg
a = df.groupby('country')['total_ghg'].sum().sort_values(ascending = False).head(5).to_frame().reset_index()
a.columns =['Country', 'Total green house gas emission (millions tonnes)']
# Create the table
table = go.Table(
    header=dict(
        values=list(a.columns),  # Extract column names
        align="center",
        font=dict(color="darkblue", size=12)
    ),
    cells=dict(
        values=[a[col] for col in a.columns],  # Extract cell values
        align="center",
        font=dict(color="black", size=10)
    )
)

# Create the figure
fig = go.Figure(data=[table])

# Display the plot
fig.show()

#top 10 country emit ghg_per_capita
a = df.groupby('country')['ghg_per_capita'].sum().sort_values(ascending = False).head(10).to_frame().reset_index()
a.columns =['Country', 'Total green house gas emission per capita (tonnes per person)']
# Create the table
table = go.Table(
    header=dict(
        values=list(a.columns),  # Extract column names
        align="center",
        font=dict(color="darkblue", size=12)
    ),
    cells=dict(
        values=[a[col] for col in a.columns],  # Extract cell values
        align="center",
        font=dict(color="black", size=10)
    )
)

# Create the figure
fig = go.Figure(data=[table])

# Display the plot
fig.show()

a = df.groupby('country')['ghg_per_capita'].sum().sort_values(ascending = False).to_frame().reset_index()
a[a['country'] == 'Thailand']

"""## Which feature affect green house gas emission?
So we conduct correlation using spearman not pearson in order of right skew distribution we have 2 approach to select feature\
- Threshold-based Selection
- Hypothesis testing
"""

# Calculate correlation matrix (exclude rows/columns with missing values)
import numpy as np

corr_matrix = df.select_dtypes(include=[np.number]).corr(method='spearman')  # Use Spearman's rank correlation for non-normal data

"""Too many features can plot in heatmap so we only select correlation more than 0.7 or less than -0.7 as potential strong correlation (Threshold-based Selection)"""

corr_matrix[abs(corr_matrix) > 0.7]['total_ghg'].sort_values(ascending = False)

cor = continent_df.select_dtypes(include=[np.number]).corr(method='spearman')
cor[abs(cor) > 0.7]['total_ghg'].sort_values(ascending = False)

corr_matrix = df.select_dtypes(include=[np.number]).corr(method='spearman')
corr_matrix[abs(corr_matrix) > 0.7]['temperature_change_from_ghg'].sort_values(ascending = False)

cor = continent_df.select_dtypes(include=[np.number]).corr(method='spearman')
cor[abs(cor) > 0.7]['temperature_change_from_ghg'].sort_values(ascending = False)

corr_matrix = df.select_dtypes(include=[np.number]).corr(method='spearman')
corr_matrix[abs(corr_matrix) > 0.7]['co2_including_luc'].sort_values(ascending = False)

"""Use hypothesis testing to select correlation feature using spearman rank and non-parametric test"""

from scipy.stats import spearmanr  # Assuming you're using Spearman's rank

# Loop through features and perform hypothesis testing
for feature in df.select_dtypes(include=[np.number]).columns:
    if feature == 'total_ghg_excluding_lucf':  # Skip the target variable (if applicable)
        continue
    corr, pval = spearmanr(df[feature], df['total_ghg_excluding_lucf'])  # Replace 'target' with your target variable
    if pval < 0.05:  # Adjust significance level as needed (e.g., 0.01)
        print(f"Feature: {feature}, Correlation: {corr:.2f}, p-value: {pval:.4f} (Significant)")

# Loop through features and perform hypothesis testing
for feature in continent_df.select_dtypes(include=[np.number]).columns:
    if feature == 'total_ghg_excluding_lucf':  # Skip the target variable (if applicable)
        continue
    corr, pval = spearmanr(continent_df[feature], continent_df['total_ghg_excluding_lucf'])
    if pval < 0.05:  # Adjust significance level as needed (e.g., 0.01)
        print(f"Feature: {feature}, Correlation: {corr:.2f}, p-value: {pval:.4f} (Significant)")

"""#Visualize

## what source is the most share in emission?

###**Overall source of CO2 gas emission comes from**
"""

def Top5_plot(df,x,y,z):
  df_pivoted = df.pivot(index=x, columns=z, values=y)

  # Extract the column names (countries)
  countries = list(df_pivoted.columns)

  # Create line plots for each country
  for country in countries:
      plt.plot(df_pivoted.index, df_pivoted[country], label=country)

  # Set labels and title
  plt.xlabel("Year")
  plt.ylabel("Share of Global CO2 Emissions (%)")
  plt.title("Top 5 {} by Country over Time".format(y))
  # Add legend and grid
  plt.legend()
  plt.grid(False)
  # Show the plot
  plt.show()

top_5_per_year = df[['country','year','share_global_co2']].groupby('year').apply(lambda x: x.nlargest(5, 'share_global_co2')).reset_index(drop=True)
Top5_plot(top_5_per_year,'year','share_global_co2','country')

a=df[['country','year','ghg_per_capita']]
top_5_per_year = a[a['year'] <= 2020].groupby('year').apply(lambda x: x.nlargest(5, 'ghg_per_capita')).reset_index(drop=True)

fig = px.line(top_5_per_year, x='year', y='ghg_per_capita', color='country')

# Set the title
fig.update_layout(title="Top 5 green house gas per capita including land-use change and forestry countries Over Time")

# Get maximum x-values for each line
max_x = top_5_per_year.groupby('country')['year'].max()
countries = top_5_per_year["country"].unique()
# Create annotations with adjusted positions
annotations = []
for i, country in enumerate(countries):
    x_pos = max_x.loc[country] - 0.1  # Adjust offset for right-alignment
    y_pos = top_5_per_year[top_5_per_year['country'] == country]['ghg_per_capita'].iloc[-1]
    annotations.append(
        go.layout.Annotation(
            x=x_pos,
            y=y_pos,
            text=country,
            showarrow=False,
            font=dict(color=fig.data[i]["line"]["color"]),
            xanchor="left",
            yanchor="top"
        )
    )

# Add annotations to the layout
fig.update_layout(annotations=annotations,
                  xaxis_title="Year",
                  yaxis_title="Total green house gas per capita (tonnes per person)")


# Display the plot
fig.show()

a=df[['country','year','total_ghg']]
top_5_per_year = a[a['year'] <= 2020].groupby('year').apply(lambda x: x.nlargest(5, 'total_ghg')).reset_index(drop=True)

fig = px.line(top_5_per_year, x='year', y='total_ghg', color='country')

# Set the title
fig.update_layout(title="Top 5 Total green house gas including land-use change and forestry countries Over Time")

# Get maximum x-values for each line
max_x = top_5_per_year.groupby('country')['year'].max()
countries = top_5_per_year["country"].unique()
# Create annotations with adjusted positions
annotations = []
for i, country in enumerate(countries):
    x_pos = max_x.loc[country] - 0.1  # Adjust offset for right-alignment
    y_pos = top_5_per_year[top_5_per_year['country'] == country]['total_ghg'].iloc[-1]
    annotations.append(
        go.layout.Annotation(
            x=x_pos,
            y=y_pos,
            text=country,
            showarrow=False,
            font=dict(color=fig.data[i]["line"]["color"]),
            xanchor="left",
            yanchor="top"
        )
    )

# Add annotations to the layout
fig.update_layout(annotations=annotations,
                  xaxis_title="Year",
                  yaxis_title="Total green house gas (tonnes per person)")


# Display the plot
fig.show()

top_5_per_year = df[['country','year','share_global_co2']].groupby('year').apply(lambda x: x.nlargest(5, 'share_global_co2')).reset_index(drop=True)

fig = px.line(top_5_per_year, x='year', y='share_global_co2', color='country', symbol="country")

# Set the title
fig.update_layout(title="Top 5 CO2 Emitting Countries Over Time")

# Get maximum x-values for each line
max_x = top_5_per_year.groupby('country')['year'].max()
countries = top_5_per_year["country"].unique()
# Create annotations with adjusted positions
annotations = []
for i, country in enumerate(countries):
    x_pos = max_x.loc[country] - 0.1  # Adjust offset for right-alignment
    y_pos = top_5_per_year[top_5_per_year['country'] == country]['share_global_co2'].iloc[-1]
    annotations.append(
        go.layout.Annotation(
            x=x_pos,
            y=y_pos,
            text=country,
            showarrow=False,
            font=dict(color=fig.data[i]["line"]["color"]),
            xanchor="right",
            yanchor="top"
        )
    )

# Add annotations to the layout
fig.update_layout(annotations=annotations)

# Display the plot
fig.show()

df_ovall = df[['methane','nitrous_oxide','co2_including_luc']]
df_ovall_sum=df_ovall.sum(axis=0).to_frame().reset_index()

# Create the bar plot
fig = px.bar(df_ovall_sum.sort_values(by=[0],ascending =False), x='index', y=0, title='All Greehouse Gas emission around the world in Bar Plot')

# Customize the plot (optional)
fig.update_layout(xaxis_title='Gas', yaxis_title='CO2 emission (million tonnes)')
fig.update_traces(marker_color='lightblue')  # Change bar color
fig.update_layout(xaxis_showgrid=False, yaxis_showgrid=False)

# Show the plot
fig.show()

df_ovall = df[['cement_co2','oil_co2','gas_co2','flaring_co2','coal_co2','land_use_change_co2','other_industry_co2']]
df_ovall_sum=df_ovall.sum(axis=0).to_frame().reset_index()

# Create the bar plot
fig = px.bar(df_ovall_sum.sort_values(by=[0],ascending =False), x='index', y=0, title='CO2 emission from sources around the world')

# Customize the plot (optional)
fig.update_layout(xaxis_title='Source', yaxis_title='CO2 emission (million tonnes)')
fig.update_traces(marker_color='lightblue')  # Change bar color

# Show the plot
fig.show()

country = ['Thailand','China','Russia','United States','United Kingdom','India']
continent = ['World','China','Europe','Asia','Africa','South America','North America','Oceania']
wealth = ['High-income countries','Low-income countries','Lower-middle-income countries','Upper-middle-income countries']

continent_grouped = continent_df[continent_df['country'].isin(continent)].groupby("country")['total_ghg_excluding_lucf'].sum().sort_values(ascending = False)
fig = go.Figure(
    data=[go.Bar(x=continent_grouped.index, y=continent_grouped.values, name="Green house gas Emissions")],
    layout=go.Layout(
        title="Green house gas Emissions by Continent",
        xaxis_title="Continent",
        yaxis_title="Green house gas Emissions (million tonnes)",
        barmode="group"  # Stack bars on top of each other
    )
)

# Display the chart
fig.show()

df_grouped = df[df['country'].isin(country)].groupby("country")
df_grouped2 = df.groupby("country")

# Create traces (one line for each country)
def line_plot_country(df, x_feature, y_feature):
  traces = []
  for country, group_data in df:
      trace = go.Scatter(
          x=group_data[x_feature],
          y=group_data[y_feature],
          mode="lines",
          name=country
      )
      traces.append(trace)

  # Create the layout
  layout = go.Layout(
      title="Line plot of {} in each country by {}".format(y_feature, x_feature),
      xaxis_title=x_feature,
      yaxis_title=y_feature
  )

  # Create the figure and add traces
  fig = go.Figure(data=traces, layout=layout)
  # Display the plot
  fig.show()

line_plot_country(df_grouped,"year","oil_co2")

line_plot_country(df_grouped,"year","coal_co2")

line_plot_country(df_grouped,"year","cement_co2")

line_plot_country(df_grouped,"year","flaring_co2")

line_plot_country(df_grouped,"year","gas_co2")

line_plot_country(df_grouped,"year","other_industry_co2")

"""## About Thailand"""

df_ovall = df[df['country'] == 'Thailand'][['methane','nitrous_oxide','co2_including_luc']]

df_thai_sum = df_ovall.sum(axis=0).to_frame().reset_index()

# Create the bar plot
fig = px.bar(df_thai_sum.sort_values(by=[0],ascending =False), x='index', y=0, title='All Greehouse Gas emission in Thailand in Bar Plot')

# Customize the plot (optional)
fig.update_layout(xaxis_title='Green house gas', yaxis_title='Carbon dioxide-equivalents (million tonnes)')
fig.update_traces(marker_color='lightblue')  # Change bar color

# Show the plot
fig.show()

df_ovall = df[df['country'] == 'Thailand'][['cement_co2','oil_co2','gas_co2','flaring_co2','coal_co2','land_use_change_co2','other_industry_co2']]

df_thai_sum = df_ovall.sum(axis=0).to_frame().reset_index()

# Create the bar plot
fig = px.bar(df_thai_sum.sort_values(by=[0],ascending =False), x='index', y=0, title='CO2 emission from sources in Thailand in Bar Plot')

# Customize the plot (optional)
fig.update_layout(xaxis_title='Source', yaxis_title='CO2 emission (million tonnes)')
fig.update_traces(marker_color='lightblue')  # Change bar color

# Show the plot
fig.show()

thailand_data = df[df['country'] == 'Thailand']
features = ['cement_co2', 'oil_co2', 'gas_co2', 'flaring_co2', 'coal_co2', 'land_use_change_co2','other_industry_co2']

# Create line traces
traces = []
for feature in features:
    trace = go.Scatter(
        x=thailand_data['year'],
        y=thailand_data[feature],
        mode='lines',
        name=feature
    )
    traces.append(trace)

# Create the layout
layout = go.Layout(
    title=f"CO2 Emissions in Thailand by Source Over Time",
    xaxis_title='Year',
    yaxis_title='CO2 Emissions (Unit : millions tonnes)',  # Replace '...' with the appropriate unit
)

# Create the figure
fig = go.Figure(data=traces, layout=layout)

# Display the plot
fig.show()

thailand_data = df[df['country'] == 'Thailand']
thailand_data = thailand_data[thailand_data['year']<=2021]
features = temp

# Create line traces
traces = []
for feature in features:
    trace = go.Scatter(
        x=thailand_data['year'],
        y=thailand_data[feature],
        mode='lines',
        name=feature
    )
    traces.append(trace)

# Create the layout
layout = go.Layout(
    title=f"Change in global mean surface temperature caused by green house gas in Thailand Over Time",
    xaxis_title='Year',
    yaxis_title='Temperature (°C)',  # Replace '...' with the appropriate unit
)

# Create the figure
fig = go.Figure(data=traces, layout=layout)

# Display the plot
fig.show()

"""- Primary energy consumption - Measured in terawatt-hours.
- Consumption-based emissions attribute the emissions generated in the production of goods and services according to where they were consumed, rather than where they were produced.
The data is calculated by adjusting 'production-based' emissions (emissions produced domestically) for trade: Consumption-based emissions equals production-based emissions, minus emissions embedded in exports, plus emissions embedded in imports.

##**Consumption-based CO₂ emissions**
Consumption-based emissions include those from fossil fuels and industry. Land-use change emissions are not included. (fossil fuels and industry + trade co2)
"""

df_grouped = df[df['country'].isin(country)].groupby("country")
line_plot_country(df_grouped,"year","consumption_co2")

df_grouped = df[df['country'].isin(country)].groupby("country")
line_plot_country(df_grouped,"year","consumption_co2_per_capita")

df_grouped = df[df['country'].isin(country)].groupby("country")
line_plot_country(df_grouped,"year","consumption_co2_per_gdp")

"""## Temperature by year"""

a = df[['country','year','share_of_temperature_change_from_ghg']]
top_5_per_year = a[a['year'] <= 2021].groupby('year').apply(lambda x: x.nlargest(5, 'share_of_temperature_change_from_ghg')).reset_index(drop=True)
Top5_plot(top_5_per_year,'year','share_of_temperature_change_from_ghg','country')

fig = px.line(top_5_per_year, x='year', y='share_of_temperature_change_from_ghg', color='country', symbol="country")

# Set the title
fig.update_layout(title="Top 5 temperature change from green house gas in percent Over Time")

# Get maximum x-values for each line
max_x = top_5_per_year.groupby('country')['year'].max()
countries = top_5_per_year["country"].unique()
# Create annotations with adjusted positions
annotations = []
for i, country in enumerate(countries):
    x_pos = max_x.loc[country] - 0.1  # Adjust offset for right-alignment
    y_pos = top_5_per_year[top_5_per_year['country'] == country]['share_of_temperature_change_from_ghg'].iloc[-1]
    annotations.append(
        go.layout.Annotation(
            x=x_pos,
            y=y_pos,
            text=country,
            showarrow=False,
            font=dict(color=fig.data[i]["line"]["color"]),
            xanchor="right",
            yanchor="top"
        )
    )

# Add annotations to the layout
fig.update_layout(annotations=annotations)

# Display the plot
fig.show()

c = continent_df[continent_df['country'].isin(continent)]
fig = px.line(c[c['year']<=2021], x='year', y='temperature_change_from_ghg', color='country')

fig.update_layout(title="Temperature change from green house gas Over Time by continent")

# Get maximum x-values for each line
max_x = c[c['year']<=2021].groupby('country')['year'].max()
countries = c[c['year']<=2021]["country"].unique()
# Create annotations with adjusted positions
annotations = []
for i, country in enumerate(countries):
    x_pos = max_x.loc[country] - 0.1  # Adjust offset for right-alignment
    y_pos = c[c['year']<=2021][c[c['year']<=2021]['country'] == country]['temperature_change_from_ghg'].iloc[-1]
    annotations.append(
        go.layout.Annotation(
            x=x_pos,
            y=y_pos,
            text=country,
            showarrow=False,
            font=dict(color=fig.data[i]["line"]["color"]),
            xanchor="left",
            yanchor="top"
        )
    )
fig.update_layout(
    xaxis_title="Year",
    yaxis_title="temperature change from green house gas (celcius)"
)
# Add annotations to the layout
fig.update_layout(annotations=annotations)

fig.show()

country = ['Thailand','China','Russia','United States','United Kingdom','India']
df_grouped = df[df['country'].isin(country)].groupby("country")
line_plot_country(df_grouped,"year","temperature_change_from_co2")

df_grouped = continent_df[continent_df['country'].isin(continent)].groupby("country")
line_plot_country(df_grouped,"year","temperature_change_from_co2")

c = continent_df[continent_df['country'].isin(continent)]
fig = px.line(c[c['year']<=2020], x='year', y='ghg_per_capita', color='country')

fig.update_layout(title="Total green house gas per capita include land use change Over Time by continent")

# Get maximum x-values for each line
max_x = c[c['year']<=2020].groupby('country')['year'].max()
countries = c[c['year']<=2020]["country"].unique()
# Create annotations with adjusted positions
annotations = []
for i, country in enumerate(countries):
    x_pos = max_x.loc[country] - 0.1  # Adjust offset for right-alignment
    y_pos = c[c['year']<=2020][c[c['year']<=2021]['country'] == country]['ghg_per_capita'].iloc[-1]
    annotations.append(
        go.layout.Annotation(
            x=x_pos,
            y=y_pos,
            text=country,
            showarrow=False,
            font=dict(color=fig.data[i]["line"]["color"]),
            xanchor="left",
            yanchor="top"
        )
    )
fig.update_layout(
    xaxis_title="Year",
    yaxis_title="Total green house gas per capita(tonnes per person)"
)
# Add annotations to the layout
fig.update_layout(annotations=annotations)

fig.show()

df.shape

continent_df.shape

df.to_csv('country.csv', index=False)
continent_df.to_csv('continent.csv', index=False)

